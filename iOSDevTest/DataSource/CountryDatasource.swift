import UIKit

protocol NewsfeedDatasourceDelegate: class {
    func updateView()
}

class CountryDatasource {
    
//    weak var delegate: NewsfeedDatasourceDelegate?
//    let apiService: ApiService
    var nextFrom: String? = nil
    private var nextFromRequested = Set<String>() // to prevent duplicated request
    
    var viewModels = [CountryBriefViewModel]()
    var count: Int {
        return viewModels.count
    }
    
//    init(apiService: ApiService = VkApiService()) {
//        self.apiService = apiService
//    }

    // MARK: - Instance Methods
    func counryViewModelForRow(at indexPath: IndexPath) -> CountryBriefViewModel? {
        // Pagination
//        let rowsLeft = viewModels.count - indexPath.row
//        let isNextPageRequered =
//            rowsLeft < VkApiSettings.prefetchThreshold
//            && nextFrom != nil
//            && !nextFromRequested.contains(nextFrom!)
//
//        if isNextPageRequered {
//            log.debug("=== üîÇ [Datasourse.newsViewModelForRow] please init request with next_from: \(nextFrom ?? "<initial request>")")
//            loadPageOfNews()
//        }

        if indexPath.row < viewModels.count {
            return viewModels[indexPath.row]
        } else { return CountryBriefViewModel.emptyNews }
    }
    
    func loadFirstPage() {
        nextFrom = nil
        viewModels = [CountryBriefViewModel]()
        loadPageOfNews()
    }
    
    private func loadPageOfNews() {
        
        if let nextFrom = nextFrom { // if it's not an initial request
            nextFromRequested.insert(nextFrom) // mark request as made
        }
        
        viewModels = [
            CountryBriefViewModel(
                name: "–ê–±—Ö–∞–∑–∏—è",
                capital:"–°—É—Ö—É–º",
                image: URL(string: "http://landmarks.ru/wp-content/uploads/2015/05/abhaziya.jpg"),
                descriptionSmall : "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–±—Ö–∞–∑–∏—è - —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ. –ö–µ–º –Ω–µ –ø—Ä–∏–∑–Ω–∞–Ω–æ - –¥–ª—è —Ç–µ—Ö —ç—Ç–æ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–±—Ö–∞–∑–∏—è –≤ —Å–æ—Å—Ç–∞–≤–µ –ì—Ä—É–∑–∏–∏, –ø—Ä–∏—á–µ–º –æ–∫–∫—É–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –†–æ—Å—Å–∏–µ–π."
            ),
            CountryBriefViewModel(
                name: "–ê–≤—Å—Ç—Ä–∞–ª–∏—è",
                capital:"–ö–∞–Ω–±–µ—Ä—Ä–∞",
                image: URL(string: "http://puteshestvia.com/uploads/images/00/00/01/2013/03/10/fb8d43.jpg"),
                descriptionSmall : "–ê–≤—Å—Ç—Ä–∞–ª–∏—è (–æ—Ç –ª–∞—Ç. Australis - —é–∂–Ω—ã–π), —Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–∫ –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –°–æ—é–∑, - —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç —Ü–µ–ª—ã–π –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç. –í–ø—Ä–æ—á–µ–º, –µ—Å—Ç—å –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã –∏ –ø–æ–±–æ–ª—å—à–µ, –¥–∞ –∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ —Å–≤–æ–µ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ê–≤—Å—Ç—Ä–∞–ª–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –ª–∏—à—å —à–µ—Å—Ç–æ–µ –º–µ—Å—Ç–æ —Å—Ä–µ–¥–∏ —Å—Ç—Ä–∞–Ω –º–∏—Ä–∞."
            ),
            CountryBriefViewModel(
                name: "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞",
                capital:"–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å",
                image: URL(string: "https://www.votpusk.ru/country/ctimages/new/AR01.jpg"),
                descriptionSmall : ""
            ),
            CountryBriefViewModel(
            name: "–ë–µ–ª–æ—Ä—É—Å—Å–∏—è",
            capital:"–ú–∏–Ω—Å–∫",
            image: URL(string: "https://upload.wikimedia.org/wikipedia/commons/8/85/Flag_of_Belarus.svg"),
            descriptionSmall : "–ë–µ–ª–æ—Ä—É—Å—Å–∏—è - –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –≤ –í–æ—Å—Ç–æ—á–Ω–æ–π –ï–≤—Ä–æ–ø–µ. –¢–∞–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ –¥–ª—è —Ä–æ—Å—Å–∏—è–Ω, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ —Å–∞–º–∏ –±–µ–ª–æ—Ä—É—Å—ã –∏–º–µ–Ω—É—é—Ç –†–æ–¥–∏–Ω—É –∫–∞–∫ –ë–µ–ª–∞—Ä—É—Å—å –∏–ª–∏, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–µ–ª–∞—Ä—É—Å—å. –í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –∑–∞—á–∞—Å—Ç—É—é –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –≥–ª—É–ø—ã–µ –æ—à–∏–±–∫–∏ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏: –ë–µ–ª–∞—Ä—É—Å—Å–∏—è –∏ –ë–µ–ª–æ—Ä—É—Å—å."
            )]
        
//        apiService.loadNewsData(startFrom: nextFrom) { [weak self] (data) in
//
//            guard let strongSelf = self else { return }
//            guard let jsonData = data else { return }
//            var apiRespose: NewsfeedGetResponse?
//
//            do {
//                let responseDecoder = JSONDecoder()
//                responseDecoder.dateDecodingStrategy = .secondsSince1970
//                apiRespose = try responseDecoder.decode(NewsfeedGetResponse.self, from: jsonData)
//
//            } catch DecodingError.dataCorrupted(let context) {
//                log.error("==== üö´ Data coccupted. Description: \(context)")
//            } catch DecodingError.keyNotFound(let key, let context) {
//                log.error("==== üö´ Missing key: \(key)")
//                log.error("==== üö´ Debug Description: \(context)")
//            } catch DecodingError.valueNotFound(let type, let context) {
//                log.error("==== üö´ Value of type: \(type) not found")
//                log.error("==== üö´ Debug Description: \(context)")
//            } catch DecodingError.typeMismatch(let type, let context) {
//                log.error("==== üö´ Type mismathc for type: \(type)")
//                log.error("==== üö´ Debug Description: \(context)")
//            } catch {
//                log.error("==== üö´ \(error.localizedDescription)")
//            }
//
//            guard let respose = apiRespose?.response else { return }
//
//            strongSelf.nextFrom = respose.nextFrom
//
//            let viewModelsForLoadedNews = strongSelf.responseToNewsCellViewModelArray(newsResponse: respose)
//
//            strongSelf.viewModels.append(contentsOf: viewModelsForLoadedNews)
//            DispatchQueue.main.async {
//                strongSelf.delegate?.updateView()
//            }
//        }
    }
/*
    private func responseToNewsCellViewModelArray(newsResponse: NewsResponse) -> [CountryBriefViewModel] {
        var viewModelArray = [CountryBriefViewModel]()
        
        guard let news = newsResponse.news else { return viewModelArray }
        
        // map profiles array to dict
        var profilesDict = [Int:Profile]()
        if let profiles = newsResponse.profiles {
            for profile in profiles {
                profilesDict[profile.id] = profile
            }
        }
        
        // map groups array to dict
        var groupsDict = [Int:Group]()
        if let groups = newsResponse.groups {
            for group in groups {
                groupsDict[group.id] = group
            }
        }
        
        // create aray of News ViewModel
        for (index, item) in news.enumerated() {
            
            guard
                let postId = item.postId,
                let type = item.type,
                let sourceId = item.sourceId
            else {
                log.debug("=== ‚è≠ skipped news # \(index) type: \(item.type ?? "<nil>")")
                continue
            }
            
            // user name & avatar (depends on source type: profile/group
            var name: String
            var avatarUrl: URL?
            
            if sourceId > 0 {
                // source of post is a prfile (user)
                let profile = profilesDict[sourceId]
                name = "\(profile?.firstName ?? "") \(profile?.lastName ?? "")"
                avatarUrl = profile?.photo100
                
            } else {
                // source of post is a group
                let group = groupsDict[abs(sourceId)]
                name = "\(group?.name ?? "")"
                avatarUrl = group?.photo100
            }
            
            // date
            let dateString = NewsViewModel.dateToStringFormatter.string(from: item.date)
            
            // 1-2 pictures
            var imageUrls = [URL]()
            
            if let photos = item.photos?.items {
                imageUrls = photos.flatMap{$0.photo604}
            }
            
            if let attachments = item.attachments {
                let attachmentImageUrls = attachments
                    .filter{$0.type == "photo"}
                    .flatMap{$0.photo?.photo604} // think about appropriate image size
                imageUrls += attachmentImageUrls
            }
            
            // likes
            let likesCount = item.likes?.count ?? 0
            
            // postId with additional emoji to distinguish popt type: post or photo
            let postIdWithType = "\(postId)" + (type == "post" ? " üìØ" : " üñº") // post : wall_photo
            
            let viewModel = NewsViewModel(
                
                name: name,
                avatarUlr: avatarUrl,
                date: dateString,
                
                imageUlrs: imageUrls,
                
                likesCount: "\(likesCount)",
//                postId: "\(postId)",
                postId: postIdWithType,
                sourceId: "\(sourceId)",
                text: "\(item.text ?? "")")
            
            viewModelArray.append(viewModel)
        }
        return viewModelArray
    }
 */
}
